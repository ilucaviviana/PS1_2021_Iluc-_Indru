#include <LiquidCrystal.h>
#include <OneWire.h>
#include <DallasTemperature.h>
#define BUTTON_OK 8
#define BUTTON_CANCEL 6
#define BUTTON_PREV 9
#define BUTTON_NEXT 7

#define enB 10

int Bpin3 = A0;
int Bpin4 = A1;

enum Buttons 
{
  EV_OK,
  EV_CANCEL,
  EV_NEXT,
  EV_PREV,
  EV_NONE,
  EV_MAX_NUM
};

enum Menus 
{
  MENU_MAIN = 0,
  MENU_START,
  MENU_TEMP,
  MENU_TSET,
  MENU_KP,
  MENU_KI,
  MENU_KD,
  MENU_TI,
  MENU_TR,
  MENU_TM,
  MENU_MAX_NUM
};

int time=0;
int kp = 90, ki = 90, kd = 80;
float temp_q = 0;
float last_set_temperature = 0;
float PID_error = 0;
float previous_error = 0;
float elapsedTime, Time, timePrev;
float PID_value = 0;
float PID_p = 0;    float PID_i = 0;    float PID_d = 0;
float last_kp = 0;
float last_ki = 0;
float last_kd = 0;

int PID_values_fixed =0;

const int rs = 12, en = 11, d4 = 5, d5 = 4, d6 = 3, d7 = 2;
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);

int oneWireBus=13;
OneWire oneWire(oneWireBus);
DallasTemperature sensors(&oneWire);

double temp = 24;
int ti = 20 , tm = 15 , tr = 20;
//float temp_q = 0;
Menus scroll_menu = MENU_MAIN;
Menus current_menu =  MENU_MAIN;

//int numar_CAN=0;
float TEMP;

void state_machine(enum Menus menu, enum Buttons button);
Buttons GetButtons(void);
void print_menu(enum Menus menu);

typedef void (state_machine_handler_t)(void);

void print_menu(enum Menus menu)
{
  lcd.clear();
  switch(menu)
  {
    case MENU_START:
      lcd.clear();
      lcd.setCursor(0, 0);
      lcd.print("START!");
      break;
    case MENU_TEMP:   
      lcd.clear();
      lcd.setCursor(0,0);
        lcd.print("-TEMP CURENTA-");
        lcd.setCursor(0,1);
      lcd.print("TEMP = ");
      lcd.print(TEMP);
      break;
    case MENU_TSET:
        lcd.setCursor(0,0);
        lcd.print("-SET TEMP-");
        lcd.setCursor(0,1);
      lcd.print("TSET=");
      lcd.print(temp);
      break; 
    case MENU_KP:
        lcd.setCursor(0,0);
        lcd.print("-KP-");
        lcd.setCursor(0,1);
      lcd.print("KP = ");
      lcd.print(kp);
      break;
    case MENU_KD:
      lcd.setCursor(0,0);
        lcd.print("-KD-");
        lcd.setCursor(0,1);
      lcd.print("KD = ");
      lcd.print(kd);
      break;
    case MENU_KI:
      lcd.setCursor(0,0);
        lcd.print("-KI-");
        lcd.setCursor(0,1);
      lcd.print("KI = ");
      lcd.print(ki);
      break;
    case MENU_TI:
      lcd.setCursor(0,0);
        lcd.print("-TIMP INCALZIRE-");
        lcd.setCursor(0,1);
      lcd.print("TI = ");
      lcd.print(ti);
      break;
    case MENU_TM:
      lcd.setCursor(0,0);
        lcd.print("-TIMP MENTINERE-");
        lcd.setCursor(0,1);
      lcd.print("TM = ");
      lcd.print(tm);
      break;
    case MENU_TR:
      lcd.setCursor(0,0);
        lcd.print("-TIMP RACIRE-");
        lcd.setCursor(0,1);
      lcd.print("TR = ");
      lcd.print(tr);
      break; 
    
    case MENU_MAIN:
    default:
    { lcd.setCursor(4,0);
      lcd.print("-MENIU-");
      break;
    }
  }
  
  if(current_menu != MENU_MAIN)
  {
    if(current_menu == MENU_TSET)
  {
    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print("-SET TEMP-");
    lcd.setCursor(0,1);
    lcd.print("modifica: ");
    lcd.setCursor(10,1);
    lcd.print(temp);
      
  }
  else if (current_menu == MENU_START)
  {
 
      PID_error = temp - TEMP + 3;
      PID_p = 0.01*kp * PID_error;
      PID_i = 0.01*PID_i + (ki * PID_error);

      timePrev = Time;
      Time = millis();
      elapsedTime = (Time - timePrev) / 1000;
      PID_d = 0.01*kd*((PID_error - previous_error)/elapsedTime);
      PID_value = PID_p + PID_i + PID_d;

      if(PID_value < 0)
      {    PID_value = 0;    }
      if(PID_value >= 255)  
      {    PID_value = 255;  }

     
      //lcd.setCursor(0,1);
      //lcd.print("PID = ");
     // lcd.print(PID_value);

      digitalWrite(Bpin3, HIGH);
      digitalWrite(Bpin4, LOW); 
      //analogWrite(enB,PID_value);
      

      timer();
      if(time <= ti)
     {
       Serial.print(PID_value);
       Serial.print(" ");
      // PID_value = 255;
       analogWrite(enB,255);
       lcd.clear();
       lcd.setCursor(0,0);
       lcd.print("T=");
       lcd.print(TEMP);
        lcd.print(" S=");
       lcd.print(temp);
    
       lcd.setCursor(0,1);
       lcd.print("Incalzire: ");
       lcd.print(time);
      }

       else if(time <= ti + tm)
      {
        Serial.print(PID_value);
         Serial.print(" ");
       analogWrite(enB,PID_value);
       lcd.clear();
       lcd.setCursor(0,0);
       lcd.print("T=");
       lcd.print(TEMP);
       lcd.print(" S=");
       lcd.print(temp);
    
       lcd.setCursor(0,1);
       lcd.print("Mentinere: ");
       lcd.print(time-ti);
     }

       else if(time <= ti + tm + tr)
     {
       Serial.print(PID_value);
        Serial.print(" ");
       //PID_value = 0; 
       analogWrite(enB,0);
       lcd.clear();
       lcd.setCursor(0,0);
       lcd.print("T=");
       lcd.print(TEMP);
       lcd.print(" S=");
       lcd.print(temp);
    
       lcd.setCursor(0,1);
       lcd.print("Racire: ");
       lcd.print(time-ti-tm);

      }
      previous_error = PID_error;
    
  }
   else if(current_menu == MENU_KP)
  {
    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print("-KP-");
    lcd.setCursor(0,1);
    lcd.print("modifica: ");
    lcd.setCursor(10,1);
    lcd.print(kp);
      
  }
    else if(current_menu == MENU_KD)
  {
    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print("-KD-");
    lcd.setCursor(0,1);
    lcd.print("modifica: ");
    lcd.setCursor(10,1);
    lcd.print(kd);
      
  }
    else if(current_menu == MENU_KI)
  {
    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print("-KI-");
    lcd.setCursor(0,1);
    lcd.print("modifica: ");
    lcd.setCursor(10,1);
    lcd.print(ki);
      
  }
    else if(current_menu == MENU_TI)
  {
    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print("-TIMP INCALZIRE-");
    lcd.setCursor(0,1);
    lcd.print("modifica: ");
    lcd.setCursor(10,1);
    lcd.print(ti);
      
  }
    else if(current_menu == MENU_TR)
  {
    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print("-TIMP RACIRE-");
    lcd.setCursor(0,1);
    lcd.print("modifica: ");
    lcd.setCursor(10,1);
    lcd.print(tr);
      
  }  else if(current_menu == MENU_TM)
  {
    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print("-TIMP MENTINERE-");
    lcd.setCursor(0,1);
    lcd.print("modifica: ");
    lcd.setCursor(10,1);
    lcd.print(tm);
      
  }
    
  }
}

void enter_menu(void)
{
  current_menu = scroll_menu;
}

void go_home(void)
{
  scroll_menu = MENU_MAIN;
  current_menu = scroll_menu;
}

void go_next(void)
{
  scroll_menu = (Menus) ((int)scroll_menu + 1);
  scroll_menu = (Menus) ((int)scroll_menu % MENU_MAX_NUM);
}

void go_prev(void)
{
  scroll_menu = (Menus) ((int)scroll_menu - 1);
  scroll_menu = (Menus) ((int)scroll_menu % MENU_MAX_NUM);
}

void save_kp(void)
{
}
void inc_kd(void)
{
  kd++;
}

void dec_kd(void)
{
  kd--;
}
void inc_ki(void)
{
  ki++;
}

void dec_ki(void)
{
  ki--;
}
void inc_kp(void)
{
  kp++;
}

void dec_kp(void)
{
  kp--;
}

void save_temp(void)
{
}

void inc_temp(void)
{
  temp++;
}

void dec_temp(void)
{
  temp--;
}
void inc_ti(void)
{
  ti++;
}

void dec_ti(void)
{
  ti--;
}
void inc_tr(void)
{
  tr++;
}

void dec_tr(void)
{
  tr--;
}
void inc_tm(void)
{
  tm++;
}

void dec_tm(void)
{
  tm--;
}


state_machine_handler_t* sm[MENU_MAX_NUM][EV_MAX_NUM] = 
{ //events: OK , CANCEL , NEXT, PREV
  {enter_menu, go_home, go_next, go_prev},  // MENU_MAIN
  {go_home, go_home, go_home, go_home},//MENU_START
  {go_home, go_home},   // MENU_TEMP
  {go_home, go_home, inc_temp, dec_temp},   // MENU_TSET
  {go_home, go_home, inc_kp, dec_kp},       // MENU_KP
  {go_home, go_home, inc_ki, dec_ki},   // MENU_KI
  {go_home, go_home, inc_kd, dec_kd},   // MENU_KD
  {go_home, go_home, inc_ti, dec_ti},   // MENU_TI
  {go_home, go_home, inc_tr, dec_tr},   // MENU_TR
  {go_home, go_home, inc_tm, dec_tm},   // MENU_TM
};

void state_machine(enum Menus menu, enum Buttons button)
{
  sm[menu][button]();
}

Buttons GetButtons(void)
{
  enum Buttons ret_val = EV_NONE;
  if (digitalRead(BUTTON_OK))
  {
    ret_val = EV_OK;
  }
  else if (digitalRead(BUTTON_CANCEL))
  {
    ret_val = EV_CANCEL;
  }
  else if (digitalRead(BUTTON_NEXT))
  {
    ret_val = EV_NEXT;
  }
  else if (digitalRead(BUTTON_PREV))
  {
    ret_val = EV_PREV;
  }
  //Serial.print(ret_val);
  return ret_val;
}

void setup()
{
  Serial.begin(9600);
  lcd.begin(16,2);

  pinMode(enB, OUTPUT);
  pinMode(Bpin3, OUTPUT);
  pinMode(Bpin4, OUTPUT);
  
  pinMode(LED_BUILTIN, OUTPUT);
  digitalWrite(LED_BUILTIN, LOW);
  sensors.begin(); 
  
  pinMode(6, INPUT);
  digitalWrite(6, LOW); // pull-down
    pinMode(7, INPUT);
  digitalWrite(7, LOW); // pull-down
    pinMode(8, INPUT);
  digitalWrite(8, LOW); // pull-down
    pinMode(9, INPUT);
  digitalWrite(9, LOW); // pull-down

   Time = millis();
   
}

void timer()
{ 
  cli();
  TCCR1A=0;
  TCCR1B=0;
  TCCR1C=0;
  TCCR1B = TCCR1B | (1 << WGM12);
  TCCR1B =(TCCR1B |((1 << CS10)|(1 << CS12))); //prescaler 1024 
  TIMSK1 |= 1 << TOIE1; //registrul de timer interrupt, bitul TOIE1 setat pt a permite intrerupere prin overflow
  TCNT1 = 49910;
  OCR1A = 15625;
  sei();
}

ISR(TIMER1_OVF_vect) //ora 
{ 
   time++;
}

void loop()
{
  sensors.requestTemperatures();
  TEMP=sensors.getTempCByIndex(0);
 // Serial.println(TEMP);
 // lcd.print(TEMP);
 volatile Buttons event = GetButtons();
 if (event != EV_NONE)
  {
    state_machine(current_menu, event);
  }
    print_menu(scroll_menu);

  delay(2000);
  lcd.clear();
}
 
